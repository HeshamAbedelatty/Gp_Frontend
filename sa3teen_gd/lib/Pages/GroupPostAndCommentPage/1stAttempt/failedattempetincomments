import 'dart:ui';

import 'package:flutter/material.dart';
import 'package:flutter/widgets.dart';
import 'package:gp_screen/widgets/constantsAcrossTheApp/constants.dart';
import 'PostAndCommentModel.dart';
import 'package:like_button/like_button.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
  
}

class _HomeScreenState extends State<HomeScreen> {
  List<Post> _posts = [];
  final TextEditingController _commentController = TextEditingController();

  // Track whether the text field for adding comments should be visible
  bool _isCommentFieldVisible = false;

  // Function to toggle the visibility of the comment text field
  void _toggleCommentFieldVisibility() {
    setState(() {
      _isCommentFieldVisible = !_isCommentFieldVisible;
    });}
  void _addPost(String content) {
    setState(() {
      _posts.add(Post(
        id: DateTime.now().toString(),
        content: content,
        creatorName: 'Salma',
        creatorImageUrl: 'https://example.com/salma_profile_picture.jpg',
        likes: 0, dislikes: 0, // Replace with actual image URL
      ));
    });
  }

  // void _addComment(String postId, String content) {
  //   setState(() {
  //     final post = _posts.firstWhere((post) => post.id == postId);
  //     post.comments
  //         .add(Comment(id: DateTime.now().toString(), content: content));
  //   });
  //   _commentController.clear();
  // }
void _addComment(String postId, String content) {
  final postIndex = _posts.indexWhere((post) => post.id == postId);
  if (postIndex != -1) {
    setState(() {
      _posts[postIndex].comments.add(Comment(id: DateTime.now().toString(), content: content));
    });
    _commentController.clear();
  }
}

  void _showPostDialog() {
    final TextEditingController _postController = TextEditingController();
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text('Create Post'),
          content: TextField(
            controller: _postController,
            decoration: InputDecoration(hintText: 'What\'s on your mind?'),
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop(); // Close the dialog
              },
              child: Text('Cancel'),
            ),
            ElevatedButton(
              onPressed: () {
                if (_postController.text.isNotEmpty) {
                  _addPost(_postController.text);
                }
                Navigator.of(context).pop(); // Close the dialog
              },
              child: Text('Post'),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(title: Text('Group App')),
      body: Column(
        children: [
          Expanded(
            child: ListView.builder(
              itemCount: _posts.length,
              itemBuilder: (context, index) {
                final post = _posts[index];
                return Card(
                  // surfaceTintColor:Colors.black,
                  shadowColor: Colors.black,
                  // shadowColor:kpr
                  color: kprimaryColourWhite,
                  margin: EdgeInsets.all(8.0),
                  child: Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(
                          children: [
                            CircleAvatar(
                              backgroundImage:
                                  NetworkImage(post.creatorImageUrl),
                            ),
                            SizedBox(width: 10.0),
                            Text(post.creatorName,
                                style: TextStyle(fontWeight: FontWeight.bold)),
                          ],
                        ),
                        SizedBox(height: 10.0),
                        Text(post.content, style: TextStyle(fontSize: 16.0)),
                        SizedBox(height: 10.0),
                        Row(
                          children: [
                            LikeButton(
                              // size: buttonSize,
                              circleColor: CircleColor(
                                  start: Color(0xff00ddff),
                                  end: Color(0xff0099cc)),
                              bubblesColor: BubblesColor(
                                dotPrimaryColor: Color(0xff33b5e5),
                                dotSecondaryColor: Color(0xff0099cc),
                              ),
                              likeBuilder: (bool isLiked) {
                                return Icon(
                                  Icons.thumb_up,
                                  color: isLiked
                                      ? Colors.green.shade700
                                      : Colors.brown.shade200,
                                  // size: buttonSize,
                                );
                              },
                              likeCount: post.likes,
                            ),
                            Text(
                              ' Likes',
                              style: TextStyle(
                                color: Colors.brown.shade200,
                              ),
                            ),
                            Spacer(
                              flex: 1,
                            ),
                            LikeButton(
                              // size: buttonSize,
                              circleColor: CircleColor(
                                  start: Color(0xff00ddff),
                                  end: Color(0xff0099cc)),
                              bubblesColor: BubblesColor(
                                dotPrimaryColor: Color(0xff33b5e5),
                                dotSecondaryColor: Color(0xff0099cc),
                              ),
                              likeBuilder: (bool isLiked) {
                                return Icon(
                                  Icons.thumb_down,
                                  color: isLiked
                                      ? Colors.green.shade700
                                      : Colors.brown.shade200,
                                  // size: buttonSize,
                                );
                              },
                              likeCount: post.dislikes,
                            ),
                            Text(
                              ' disLikes',
                              style: TextStyle(
                                color: Colors.brown.shade200,
                              ),
                            ),
                            Spacer(
                              flex: 1,
                            ),
                            IconButton(
                               onPressed: () {
                                _toggleCommentFieldVisibility(); // Toggle visibility
                              },
                                icon: Icon(
                                  Icons.comment,
                                  color: Colors.brown.shade200,
                                )),
                            Text(
                              'Comments',
                              style: TextStyle(
                                color: Colors.brown.shade200,
                              ),
                            ),
                  Visibility(
  visible: _isCommentFieldVisible,
  child: Row(
    children: [
      Expanded(
        child: TextField(
          controller: _commentController,
          decoration: InputDecoration(hintText: 'Add a comment'),
          onSubmitted: (text) {
            if (text.isNotEmpty) {
              _addComment(post.id, text);
              _commentController.clear();
            }
          },
        ),
      ),
      IconButton(
        icon: Icon(Icons.add),
        onPressed: () {
          if (_commentController.text.isNotEmpty) {
            _addComment(post.id, _commentController.text);
            _commentController.clear();
          }
        },
      ),
    ],
  ),
),

                            
                            Spacer(
                              flex: 1,
                            ),
                            LikeButton(
                              likeBuilder: (bool isLiked) {
                                return Icon(
                                  Icons.favorite,
                                  color: isLiked
                                      ? Colors.red.shade900
                                      : Colors.brown.shade200,
                                  // size: buttonSize,
                                );
                              },
                            ),
                          ],
                        ),
                        SizedBox(height: 10.0),
                        // IconButton(onPressed: (){}, icon: Icons.fingerprint),
                        Divider(),
                        Row(
                          children: [
                            // Expanded(
                            //   child: TextField(
                            //     controller: _commentController,
                            //     decoration:
                            //         InputDecoration(hintText: 'Add a comment'),
                            //     onSubmitted: (text) {
                            //       if (text.isNotEmpty) {
                            //         _addComment(post.id, text);
                            //         _commentController.clear();
                            //       }
                            //     },
                            //   ),
                            // ),
                            
                            IconButton(
                              icon: Icon(Icons.add),
                              onPressed: () {
                                if (_commentController.text.isNotEmpty) {
                                  _addComment(post.id, _commentController.text);
                                  _commentController.clear();
                                }
                              },
                            ),
                          ],
                        ),

                        ListView.builder(
                          shrinkWrap: true,
                          physics: NeverScrollableScrollPhysics(),
                          itemCount: post.comments.length,
                          itemBuilder: (context, index) {
                            final comment = post.comments[index];
                            return ListTile(
                              title: Text(comment.content),
                            );
                          },
                        ),
                        // TextField(
                        //   controller: _commentController,
                        //   decoration:
                        //       InputDecoration(hintText: 'Add a comment'),
                        //   onSubmitted: (text) {
                        //     if (text.isNotEmpty) {
                        //       _addComment(post.id, text);
                        //     }
                        //   },
                        // ),
                      ],
                    ),
                  ),
                );
              },
            ),
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _showPostDialog,
        backgroundColor: Colors.green,
        child: Icon(Icons.add),
      ),
    );
  }
}



















// import 'package:gp_screen/Pages/GroupPostAndCommentPage/PostAndCommentModel.dart';
// import 'package:flutter/material.dart';

// void main() {
//   runApp(MyApp());
// }

// class MyApp extends StatelessWidget {
//   @override
//   Widget build(BuildContext context) {
//     return MaterialApp(
//       home: HomeScreen(),
//     );
//   }
// }

// class HomeScreen extends StatefulWidget {
//   @override
//   _HomeScreenState createState() => _HomeScreenState();
// }

// class _HomeScreenState extends State<HomeScreen> {
//   List<Post> _posts = [];
//   final TextEditingController _commentController = TextEditingController();

//   void _addPost(String content) {
//     setState(() {
//       _posts.add(Post(id: DateTime.now().toString(), content: content));
//     });
//   }

//   void _addComment(String postId, String content) {
//     setState(() {
//       final post = _posts.firstWhere((post) => post.id == postId);
//       post.comments.add(Comment(id: DateTime.now().toString(), content: content));
//     });
//     _commentController.clear();
//   }

//   void _showPostDialog() {
//     final TextEditingController _postController = TextEditingController();
//     showDialog(
//       context: context,
//       builder: (context) {
//         return AlertDialog(
//           title: Text('Create Post'),
//           content: TextField(
//             controller: _postController,
//             decoration: InputDecoration(hintText: 'What\'s on your mind?'),
//           ),
//           actions: [
//             TextButton(
//               onPressed: () {
//                 Navigator.of(context).pop(); // Close the dialog
//               },
//               child: Text('Cancel'),
//             ),
//             ElevatedButton(
//               onPressed: () {
//                 if (_postController.text.isNotEmpty) {
//                   _addPost(_postController.text);
//                 }
//                 Navigator.of(context).pop(); // Close the dialog
//               },
//               child: Text('Post'),
//             ),
//           ],
//         );
//       },
//     );
//   }

//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(title: Text('Group App')),
//       body: Column(
//         children: [
//           Expanded(
//             child: ListView.builder(
//               itemCount: _posts.length,
//               itemBuilder: (context, index) {
//                 final post = _posts[index];
//                 return Card(
//                   margin: EdgeInsets.all(8.0),
//                   child: Padding(
//                     padding: const EdgeInsets.all(8.0),
//                     child: Column(
//                       crossAxisAlignment: CrossAxisAlignment.start,
//                       children: [
//                         Text(post.content, style: TextStyle(fontSize: 16.0)),
//                         Divider(),
//                         ListView.builder(
//                           shrinkWrap: true,
//                           physics: NeverScrollableScrollPhysics(),
//                           itemCount: post.comments.length,
//                           itemBuilder: (context, index) {
//                             final comment = post.comments[index];
//                             return ListTile(
//                               title: Text(comment.content),
//                             );
//                           },
//                         ),
//                         TextField(
//                           controller: _commentController,
//                           decoration: InputDecoration(hintText: 'Add a comment'),
//                           onSubmitted: (text) {
//                             if (text.isNotEmpty) {
//                               _addComment(post.id, text);
//                             }
//                           },
//                         ),
//                       ],
//                     ),
//                   ),
//                 );
//               },
//             ),
//           ),
//         ],
//       ),
//       floatingActionButton: FloatingActionButton(
//         onPressed: _showPostDialog,
//         backgroundColor: Colors.green,
//         child: Icon(Icons.add),
//       ),
//     );
//   }
// }

// // class Post {
// //   String id;
// //   String content;
// //   List<Comment> comments;

// //   Post({required this.id, required this.content, this.comments = const []});
// // }

// // class Comment {
// //   String id;
// //   String content;

// //   Comment({required this.id, required this.content});
// // }
